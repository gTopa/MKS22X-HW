import java.util.*;

public class MyStack<T>{

    private MyLinkedList<T> l;

    public MyStack(){
	l=new MyLinkedList<T>();
    }
    
    /**
     * Adds the given item to the top of the stack.
     */
    public void push(T item){
	l.add(0, item);
    }

    /**
     * Removes the top item from the stack and returns it.
     * @exception java.util.NoSuchElementException if the queue is empty.
     */
    public T pop(){
	if(isEmpty()){
	    throw new NoSuchElementException();
	}
	return l.remove(0);
    }

    /**
     * Returns the top item from the stack without popping it.
     * @exception java.util.NoSuchElementException if the queue is empty.
     */
    public T peek(){
	if(isEmpty()){
	    throw new NoSuchElementException();
	}
	return l.get(0);
    }

    /**
     * Returns the number of items currently in the stack.
     */
    public int size(){
	return l.size();
    }

    /**
     * Returns whether the stack is empty or not.
     */
    public boolean isEmpty(){
	return l.size()==0;
    }

    public static void main(String[]args){
	MyStack<String> a=new MyStack<String>();
        Stack<String> b = new Stack<String>();

        //test remove random items:
        Random rand = new Random(0);
        for(int i = 0; i < 6000; i++){
            int op = rand.nextInt(4);
            if(op == 0 || a.size()==0){//ensure never empty
                a.push(""+i);
                b.push(""+i);
            }else if(op == 1 ){
                a.push(""+i);
                b.push(""+i);
            }else{
                if(!a.pop().equals(b.pop())){
                    System.out.println("Non matching elements removed\n");
		    System.exit(1);
                }
            }
        }
	System.out.println("YAY");
    }
}
